Style:
    -unify style using MUI's styling type
    -make sure errors for inputs don't overflow, but wrap around
    -make sure tools don't overlap the board in resting state
    -change colors for better visibility on inputs
    -make info icons align to the right of the boundary
    -add animations to cell being held down/flagged
    -add animations to cell's neightbors when being held down
    -add board borders that actually look good
    -align "Game Options" text with "HIDE" button
    -add tooltip to "Guesses" checkbox

Functionalities:
    -add a way to estimate 50/50 guesses and number of items needed to be used
    -better difficulty calculation
    
    -spice up the game by adding:
        -different shapes for boards
        -different mine shapes
        -multi-layered maps
        -order of actions that matters (in a fight)
        -quests (to complete certain games)
        -arena (complete certain games back-to-back)
        -coins (to buy stuff)
        -equipment (to give you abilities)
        -battles
        -dungeons (add in new mines every x moves/seconds, spawn enemies etc.)
        etc.

    -add an ability to mark mine groups (set how many mines under same-colored flags) and smart chording based on this


Functional UX:
    -update game on ENTER when setting board settings
    -add an ability to mark mine groups (set how many mines under same-colored flags) and smart chording based on this



Design-based UX:
    -style the website to be more friendly on the eyes
    -change mine count colors to be more distinctive and visible
    -make the color scheme more drab
    -add chord hold down animation
    -add other animations
    -unify style (string-based type names, type and function names capitalization and grammar)


Performance optimizations:
    -optimize performance of board updating


Code optimizations:
    -middleware to disallow unwanted function calls (after game ended)
    -add a way generalize operations performed on cell neighboors
    -add a way to simplify state generation and re-generation
    -???remove redundant key: value from {} (ex.: {key: key})
    -remove corner opening on subsequent presses


Beginner mode:
    -add 50/50 detector
    -add detection for forced guessing
    -highlight chordable cells